// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  personas      Persona[]
  activePersonaId String?
}

model Persona {
  id                    String    @id @default(cuid())
  userId                String
  name                  String
  description           String
  icon                  String
  initialAge            Int
  currentAge            Int
  currentIncome         Float
  currentIncomeFromWealth Float
  savingsRate           Float
  inheritanceAge        Int?
  inheritanceAmount     Float
  inheritanceTaxClass   Int
  vatRate               Float
  vatApplicableRate     Float
  yearlySpendingFromWealth Float
  currentWealth         Float
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  isActive              Boolean   @default(false)

  // JSON field to store yearly overrides
  yearlyOverridesJson   String?   @db.Text

  incomeGrowth          Float

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
